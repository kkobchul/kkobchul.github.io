---
title: "풍력 발전량 산정"
runtime: shiny
output: 
  flexdashboard::flex_dashboard:
    orientation: columns
    vertical_layout: fill
    social: menu
    source_code: embed
---

```{r setup, include=FALSE}
library(flexdashboard)
library(shiny)
library(tidyverse)
library(leaflet)
library(highcharter)
library(pracma)
library(openxlsx)
library(readr)
```

```{r data}
df<-read.xlsx("/mnt/d/랩이앤이/회사사업/동네예보_풍력발전량예측/META_관측지점정보_20220519132705.xlsx",sheet=1,detectDates=TRUE) %>% rename(name=지점명,longitude=경도,latitude=위도,ids=지점) %>% as.data.frame  
df1<-read_csv("/mnt/d/랩이앤이/회사사업/동네예보_풍력발전량예측/OBS_ASOS_TIM_20220519112933.csv",locale=locale('ko',encoding='euc-kr')) %>% set_names(c("ids","name","datetime","temp","wspd","wdir","humd","mslp")) %>% mutate(dates=as.Date(datetime,format="%Y-%m-%d")) %>% as.data.frame

filename<-"/mnt/d/랩이앤이/회사사업/날씨경영솔루션_구축지원사업/파워커브모음.xlsx"
sheets <- getSheetNames(filename)
SheetList <- lapply(sheets,read.xlsx,xlsxFile=filename)
names(SheetList) <- sheets

df2<-data.frame()
for (i in c(1:length(SheetList))){
tmp<-SheetList[[i]]
tmp1<-str_split(names(tmp),pattern=' ',simplify = TRUE)
df2<-rbind(df2,data.frame(name=paste0(tmp1[2,1]," ",tmp1[1,1]),wspd=as.numeric(tmp[,1]),wp=as.numeric(tmp[,2])) %>% mutate(wspd=ifelse(is.na(wspd),0,wspd),wp=ifelse(is.na(wp),0,wp)))
}
```


Sidebar {.sidebar}
======================================================

```{r}
dateRangeInput(inputId='dateRange',label = '날짜 선택',start = min(df1$dates), end = max(df1$dates))

selectInput(inputId="wpgSelect",label="발전기 선택",choices=sort(unique(as.character(df2$name))))
```

과거 발전량
========================================================

Column 
-------------------------------------

### Map
```{r}
#output$map <- renderLeaflet({
renderLeaflet({

leaflet(data=df) %>% addTiles()  %>% addMarkers(lng = ~longitude, lat = ~latitude, layerId = ~ids)

})

#leafletOutput('map')
```

Column
-------------------------------------

### HighChart1
```{r}
click_marker <- eventReactive(input$map_marker_click, {

  x <- input$map_marker_click

  return(x$id)

})

data_for_chart1 <- reactive({

  return(df1[df1$ids == click_marker() & (df1$dates >= input$dateRange[1] & df1$dates <= input$dateRange[2]),])

})

#output$chart1 <- renderHighchart({
renderHighchart({

  highchart() %>%
    hc_chart(type = 'column') %>%
    hc_add_series(data = c(data_for_chart1()$wspd))

})

#highchartOutput('chart1')
```

### HighChart2
```{r}
click_marker <- eventReactive(input$map_marker_click, {

  x <- input$map_marker_click

  return(x$id)

})

data_for_chart2 <- reactive({

  df10<-df1[df1$ids == click_marker() & (df1$dates >= input$dateRange[1] & df1$dates <= input$dateRange[2]),]
  df20<-df2[df2$name == input$wpgSelect,]
  df20<-distinct(df20,.keep_all = TRUE)
  return(data.frame(wp=round(interp1(df20$wspd,df20$wp,xi=df10$wspd,method="linear"),1)))

})

#output$chart2 <- renderHighchart({
renderHighchart({
  
  highchart() %>%
    hc_chart(type = 'column') %>%
    hc_add_series(data = c(data_for_chart2()$wp))

})

#highchartOutput('chart2')
```
